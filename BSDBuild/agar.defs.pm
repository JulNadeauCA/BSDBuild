# Public domain
# vim:ts=4

my @options = qw(
	freetype
	fontconfig
	opengl
	jpeg
	png
	x11
	xinerama
	glx
	sdl
	wgl
	cocoa);

my @constants = qw(
	AG_ZOOM_RANGE
	AG_ZOOM_DEFAULT);

my $mainCode = << 'EOF';
int
main(int argc, char *argv[])
{
	AG_AgarVersion ver;
	AG_CPUInfo cpuinfo;
	unsigned int i;
	FILE *f;

	if ((f = fopen("agar.def", "w")) == NULL) {
		printf("Cannot write agar.def\n");
		return (1);
	}

	AG_InitCore(NULL, 0);

	fprintf(f, "-- Compiled Agar-GUI definitions on this system\n-- ex:syn=ada\n--\n");
	fprintf(f, "-- This file was generated by the agar.defs module of a\n");
	fprintf(f, "-- BSDBuild configure script <http://bsdbuild.hypertriton.com>.\n--\n");
	AG_GetVersion(&ver);
	fprintf(f, "-- Agar Version %d.%d.%d\n", ver.major, ver.minor, ver.patch);
	AG_GetCPUInfo(&cpuinfo);
	fprintf(f, "-- Platform: %s (%s, 0x%x)\n--\n", cpuinfo.arch, cpuinfo.vendorID,
	    cpuinfo.ext);
	fprintf(f, "-- Agar-GUI Build Definitions\n--\n");
	for (i = 0; i < sizeof(booldefs) / sizeof(booldefs[0]); i++) {
		fprintf(f, "%s := %s\n", booldefs[i].name,
	        strcmp("yes", booldefs[i].value) == 0 ? "True" : "False");
	}
	fprintf(f, "--\n-- Agar-GUI Constants\n--\n");
	for (i = 0; i < sizeof(constants) / sizeof(constants[0]); i++) {
#ifdef AG_HAVE_64BIT
		fprintf(f, "%s := %llu\n", constants[i].name, constants[i].value);
#else
		fprintf(f, "%s := %lu\n", constants[i].name, constants[i].value);
#endif
	}
	
	fclose(f);
	AG_Quit();
	return (0);
}
EOF

sub TEST_agar_defs
{
	my ($ver, $pfx) = @_;
	my $testCode = << 'EOF';
#include <stdio.h>
#include <string.h>
#include <agar/core.h>
#include <agar/gui.h>
EOF
	foreach my $opt (@options) {
		$testCode .= '#include <agar/config/have_' . $opt . ".h>\n";
	}
	$testCode .= << 'EOF';
static const struct {
	const char *name;
	const char *value;
} booldefs[] = {
EOF
	foreach my $opt (@options) {
		my $def = 'HAVE_' . uc($opt);
		$testCode .= << "EOF";
#ifdef $def
	{ "$def", "yes" },
#else
	{ "$def", "no" },
#endif
EOF
	}
	$testCode .= << 'EOF';
};
static const struct {
	const char *name;
#ifdef AG_HAVE_64BIT
	unsigned long long value;
#else
	unsigned long value;
#endif
} constants[] = {
EOF
	foreach my $con (@constants) {
		$testCode .= << "EOF";
	{ "$con", $con },
EOF
	};
	$testCode .= "};\n";
	$testCode .= $mainCode;

	MkExecOutputPfx($pfx, 'agar-config', '--version', 'AGAR_VERSION');
	MkIfFound($pfx, $ver, 'AGAR_VERSION');
		MkPrintSN('checking Agar-GUI definitions...');
		MkExecOutputPfx($pfx, 'agar-config', '--cflags', 'AGAR_CFLAGS');
		MkExecOutputPfx($pfx, 'agar-config', '--libs', 'AGAR_LIBS');
		MkCompileAndRunC('HAVE_AGAR_DEFS', '${AGAR_CFLAGS}', '${AGAR_LIBS}',
	                     $testCode);
	MkElse;
		DISABLE_agar_defs();
	MkEndif;
}

sub DISABLE_agar_defs
{
	MkDefine('HAVE_AGAR_DEFS', 'no');
	MkSaveUndef('HAVE_AGAR_DEFS');
}

BEGIN
{
	my $n = 'agar.defs';

	$DESCR{$n}   = 'Agar-GUI preprocessor defs';
	$URL{$n}     = 'http://libagar.org';

	$TESTS{$n}   = \&TEST_agar_defs;
	$DISABLE{$n} = \&DISABLE_agar_defs;

	$DEPS{$n}    = 'cc';
}
;1
